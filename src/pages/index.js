import { useAnonAadhaar, LogInWithAnonAadhaar, AnonAadhaarProof } from "anon-aadhaar-react";
import { useEffect, useState } from "react";
import { client, server } from '@passwordless-id/webauthn';
import { ConnectButton } from '@rainbow-me/rainbowkit';


// Use the Country Identity hook to get the status of the user.
export default function Home() {
  const [anonAadhaar] = useAnonAadhaar();
  const [aadhaarVerified, setAadhaarVerified] = useState(false);
  const [passkeyExists, setPasskeyExists] = useState(false);

  useEffect(() => {
    console.log("Anon Aadhaar status: ", anonAadhaar.status);
    const credentialKey = JSON.parse(localStorage.getItem("passkey-credential"));
    if(anonAadhaar.status === "logged-in" && !credentialKey){
      setRegisterPasskey(true);
    } else{
      setRegisterPasskey(false);
    }
  }, [anonAadhaar]);

  useEffect(()=>{
    const credentialKey = JSON.parse(localStorage.getItem("passkey-credential"));
    if(credentialKey){
      setPasskeyExists(true);
    } else {
      setPasskeyExists(false);
    }
  },[])

  const connectPasskey = async () => {
    const challenge = process.env.CHALLENGE;
    const registration = await client.register("Wallet Address", challenge, {
      authenticatorType: "both",
      userVerification: "required",
      timeout: 60000,
      attestation: false,
      userHandle: "recommended to set it to a random 64 bytes value",
      debug: false,
    });
    const expected = {
      challenge, // whatever was randomly generated by the server
      origin: window.location.origin,
    }
    const registrationParsed = await server.verifyRegistration(registration, expected);
    localStorage.setItem("passkey-credential",JSON.stringify(registrationParsed.credential));
    console.log({registrationParsed}, registrationParsed.credential);
  }

  const verifyPasskey = async () => {
    const challenge = process.env.CHALLENGE;
    const credentialKey = JSON.parse(localStorage.getItem("passkey-credential"));
    const authentication = await client.authenticate([credentialKey.id], challenge, {
      "authenticatorType": "both",
      "userVerification": "required",
      "timeout": 60000
    });
    
    const expected = {
      challenge, // whatever was randomly generated by the server.
      origin: window.location.origin,
      userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)    }
    };

    try {
      const authenticationParsed = await server.verifyAuthentication(
        authentication,
        credentialKey,
        expected
      );
      console.log({ authenticationParsed });
    } catch (e) {
      console.error(e);
    }
  }

  return (
    <>
      <div>
        <ConnectButton />
        <LogInWithAnonAadhaar />
      </div>
      <div>
        {anonAadhaar?.status === "logged-in" && (
          <>
            {/* <p>âœ… Proof is valid</p> */}
            {/* <AnonAadhaarProof code={JSON.stringify(anonAadhaar.pcd, null, 2)} /> */}
          </>
        )}
      </div>
      {registerPasskey && <button onClick={connectPasskey}>Connect Passkey</button>}
      <br />
      {true && <button onClick={verifyPasskey}>Verify Passkey</button>}
    </>
  );
}