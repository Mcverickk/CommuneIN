import { useEffect, useState } from "react";
import { client, server } from '@passwordless-id/webauthn';
import styles from '../styles/Button.module.css'; // Import the CSS file

const PasskeyLogin = () => {
  const [passkeyRegistered, setPasskeyRegistered] = useState(false);
  const [passkeyVerified, setPasskeyVerified] = useState(false);

  useEffect(()=>{
    const credentialKey = JSON.parse(localStorage.getItem("passkey-credential"));
    if(credentialKey){
      setPasskeyRegistered(true);
    } else {
      setPasskeyRegistered(false);
    }
  },[])

  const connectPasskey = async () => {
    const challenge = process.env.CHALLENGE;
    const registration = await client.register("Wallet Address", challenge, {
      authenticatorType: "both",
      userVerification: "required",
      timeout: 60000,
      attestation: false,
      userHandle: "recommended to set it to a random 64 bytes value",
      debug: false,
    });
    const expected = {
      challenge, // whatever was randomly generated by the server
      origin: window.location.origin,
    }
    const registrationParsed = await server.verifyRegistration(registration, expected);
    localStorage.setItem("passkey-credential",JSON.stringify(registrationParsed.credential));
    setPasskeyRegistered(true);
  }

  const verifyPasskey = async () => {
    const challenge = process.env.CHALLENGE;
    const credentialKey = JSON.parse(localStorage.getItem("passkey-credential"));
    const authentication = await client.authenticate([credentialKey.id], challenge, {
      "authenticatorType": "both",
      "userVerification": "required",
      "timeout": 60000
    });
    
    const expected = {
      challenge, // whatever was randomly generated by the server.
      origin: window.location.origin,
      userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)    }
    };

    try {
      const authenticationParsed = await server.verifyAuthentication(
        authentication,
        credentialKey,
        expected
      );
      setPasskeyVerified(true);
      console.log({ authenticationParsed });
      return true;
    } catch (e) {
      setPasskeyVerified(false);
      console.error(e);
      return false;
    }
  }

  const RegisterPasskeyButton = (props) => {
    return(
      <button className={props.aadhaarVerified ? styles.button : styles.inactivebutton} onClick={connectPasskey}>Register Passkey</button>
    )
  }

  const VerifyPasskeyButton = () => {
    return(
      <button className={styles.button} onClick={verifyPasskey}>Verify Passkey</button>
    )
  }

  return {RegisterPasskeyButton, VerifyPasskeyButton, verifyPasskey, passkeyRegistered, passkeyVerified}
}

export default PasskeyLogin;